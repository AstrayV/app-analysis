{"version":3,"sources":["../../src/decorator/columns/DiscriminatorColumn.ts"],"names":[],"mappings":";;AAEA,qCAAmD;AAGnD;;;;GAIG;AACH,6BAAoC,oBAAwD;IACxF,OAAO,UAAU,MAAgB;QAE7B,kEAAkE;QAClE,IAAM,OAAO,GAAkB;YAC3B,IAAI,EAAE,oBAAoB,CAAC,IAAI;YAC/B,IAAI,EAAE,oBAAoB,CAAC,IAAI;SAClC,CAAC;QAEF,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,eAAe;YACrB,YAAY,EAAE,oBAAoB,CAAC,IAAI;YACvC,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AAlBD,kDAkBC","file":"DiscriminatorColumn.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * DiscriminatorColumn is a special type column used on entity class (not entity property)\n * and creates a special column which will contain an entity type.\n * This type is required for entities which use single table inheritance pattern.\n */\nexport function DiscriminatorColumn(discriminatorOptions: { name: string, type: ColumnType }): Function {\n    return function (target: Function) {\n\n        // if column options are not given then create a new empty options\n        const options: ColumnOptions = {\n            name: discriminatorOptions.name,\n            type: discriminatorOptions.type\n        };\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: target,\n            mode: \"discriminator\",\n            propertyName: discriminatorOptions.name,\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}