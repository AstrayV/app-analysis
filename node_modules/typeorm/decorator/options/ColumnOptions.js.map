{"version":3,"sources":["../../src/decorator/options/ColumnOptions.ts"],"names":[],"mappings":"","file":"ColumnOptions.js","sourcesContent":["import {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {ValueTransformer} from \"./ValueTransformer\";\n\n/**\n * Describes all column's options.\n */\nexport interface ColumnOptions {\n\n    /**\n     * Column type. Must be one of the value from the ColumnTypes class.\n     */\n    type?: ColumnType;\n\n    /**\n     * Column name in the database.\n     */\n    name?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length?: string|number;\n\n    /**\n     * Indicates if column's value can be set to NULL.\n     */\n    nullable?: boolean;\n\n    /**\n     * Indicates if column value is not updated by \"save\" operation.\n     * It means you'll be able to write this value only when you first time insert the object.\n     * Default value is \"false\".\n     */\n    readonly?: boolean;\n\n    /**\n     * Indicates if column is always selected by QueryBuilder and find operations.\n     * Default value is \"true\".\n     */\n    select?: boolean;\n\n    /**\n     * Default database value.\n     */\n    default?: any;\n\n    /**\n     * Indicates if this column is a primary key.\n     * Same can be achieved when @PrimaryColumn decorator is used.\n     */\n    primary?: boolean;\n\n    /**\n     * Specifies if column's value must be unique or not.\n     */\n    unique?: boolean;\n\n    /**\n     * Column comment. Not supported by all database types.\n     */\n    comment?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Defines a column character set.\n     * Not supported by all database types.\n     */\n    charset?: string;\n\n    /**\n     * Defines a column collation.\n     */\n    collation?: string;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[]|Object;\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     *\n     * @deprecated use array: true instead. Will be removed in 0.2.0\n     */\n    isArray?: boolean;\n\n    /**\n     * Indicates if this column is an array.\n     * Can be simply set to true or array length can be specified.\n     * Supported only by postgres.\n     */\n    array?: boolean;\n\n    /**\n     * Specifies a value transformer that is to be used to (un)marshal\n     * this column when reading or writing to the database.\n     */\n    transformer?: ValueTransformer;\n    \n}\n"],"sourceRoot":"../.."}