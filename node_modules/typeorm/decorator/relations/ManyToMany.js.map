{"version":3,"sources":["../../src/decorator/relations/ManyToMany.ts"],"names":[],"mappings":";;AACA,qCAAmD;AAoBnD;;;;GAIG;AACH,oBAA8B,YAA2C,EAC3C,oBAAwI,EACxI,OAA+F;IACzH,IAAI,mBAAgD,CAAC;IACrD,IAAI,OAAO,oBAAoB,KAAK,QAAQ,EAAE;QAC1C,OAAO,GAAqB,oBAAoB,CAAC;KACpD;SAAM;QACH,mBAAmB,GAAiC,oBAAoB,CAAC;KAC5E;IAED,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAqB,CAAC;QAE9C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,EAAE,0BAA0B;YAChF,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACxF,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS;gBACzG,MAAM,GAAG,IAAI,CAAC;SACrB;QAED,IAAM,IAAI,GAAyB;YAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,cAAc;YAC5B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,YAAY;YAClB,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AAjCD,gCAiCC","file":"ManyToMany.js","sourcesContent":["import {RelationOptions} from \"../options/RelationOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>, options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean, eager?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSide?: string|((object: T) => any),\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean, eager?: boolean }): Function;\n\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany<T>(typeFunction: (type?: any) => ObjectType<T>,\n                              inverseSideOrOptions?: string|((object: T) => any)|{ cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean, eager?: boolean },\n                              options?: { cascadeInsert?: boolean, cascadeUpdate?: boolean, lazy?: boolean, eager?: boolean }): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}