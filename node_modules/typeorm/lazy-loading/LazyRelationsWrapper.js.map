{"version":3,"sources":["../../src/lazy-loading/LazyRelationsWrapper.ts"],"names":[],"mappings":";;AAGA,kEAA+D;AAE/D;;;GAGG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,8BAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC1C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,mCAAI,GAAJ,UAAK,MAAqB,EAAE,QAA0B;QAClD,IAAM,cAAc,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3D,IAAM,SAAS,GAAG,IAAI,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,4DAA4D;QACnH,IAAM,YAAY,GAAG,YAAY,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,gEAAgE;QAClI,IAAM,YAAY,GAAG,QAAQ,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,kGAAkG;QAEhK,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,EAAE;YACjD,GAAG,EAAE;gBAAA,iBAgBJ;gBAfG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,2DAA2D;oBACxF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAE5C,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,2EAA2E;oBAC/F,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE9B,0FAA0F;gBAC1F,IAAI,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;oBAChE,KAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;oBACzB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBAC1B,OAAO,KAAI,CAAC,YAAY,CAAC,CAAC;oBAC1B,OAAO,KAAI,CAAC,SAAS,CAAC,CAAC;gBAE3B,CAAC,CAAC,CAAC,CAAC,wCAAwC;gBAC5C,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC;YAC9B,CAAC;YACD,GAAG,EAAE,UAAS,OAAqB;gBAA9B,iBAWJ;gBAVG,IAAI,OAAO,YAAY,OAAO,EAAE,EAAE,4EAA4E;oBAC1G,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;wBACf,KAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBACzB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBAC9B,CAAC,CAAC,CAAC;iBAEN;qBAAM,EAAE,gEAAgE;oBACrE,IAAI,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;oBAC1B,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;iBAC7B;YACL,CAAC;YACD,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC;IAEL,2BAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,oDAAoB","file":"LazyRelationsWrapper.js","sourcesContent":["import {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\n\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class LazyRelationsWrapper {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing these relation.\n     */\n    wrap(object: ObjectLiteral, relation: RelationMetadata) {\n        const relationLoader = new RelationLoader(this.connection);\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\n\n        Object.defineProperty(object, relation.propertyName, {\n            get: function() {\n                if (this[resolveIndex] === true) // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n\n                if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it\n                    return this[promiseIndex];\n\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                this[promiseIndex] = relationLoader.load(relation, this).then(result => {\n                    this[dataIndex] = result;\n                    this[resolveIndex] = true;\n                    delete this[promiseIndex];\n                    return this[dataIndex];\n\n                }); // .catch((err: any) => { throw err; });\n                return this[promiseIndex];\n            },\n            set: function(promise: Promise<any>) {\n                if (promise instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\n                    promise.then(result => {\n                        this[dataIndex] = result;\n                        this[resolveIndex] = true;\n                    });\n\n                } else { // if its direct data set (non promise, probably not safe-typed)\n                    this[dataIndex] = promise;\n                    this[resolveIndex] = true;\n                }\n            },\n            configurable: true\n        });\n    }\n\n}"],"sourceRoot":".."}