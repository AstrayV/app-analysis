{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import {Table} from \"../schema-builder/schema/Table\";\nimport {TableColumn} from \"../schema-builder/schema/TableColumn\";\nimport {Connection} from \"../connection/Connection\";\nimport {Migration} from \"./Migration\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n\n    private migrationsTableName: string = \"migrations\";\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection,\n                protected queryRunner?: QueryRunner) {\n        if (connection.options.migrationsTableName) {\n            this.migrationsTableName = connection.options.migrationsTableName;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<void> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(executedMigration => executedMigration.name === migration.name);\n            if (executedMigration)\n                return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            return;\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${allMigrations.length} migrations were found in the source code.`);\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.logSchemaBuild(`${pendingMigrations.length} migrations are new migrations that needs to be executed.`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\n                return migration.instance!.up(queryRunner)\n                    .then(() => { // now when migration is executed we need to insert record about it into the database\n                        return this.insertExecutedMigration(queryRunner, migration);\n                    })\n                    .then(() => { // informative log about migration success\n                        this.connection.logger.logSchemaBuild(`Migration ${migration.name} has been executed successfully.`);\n                    });\n            });\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(queryRunner);\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestMigration(executedMigrations);\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(`No migrations was found in the database. Nothing to revert!`);\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(migration => migration.name === lastTimeExecutedMigration!.name);\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(`No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`);\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(`${executedMigrations.length} migrations are already loaded in the database.`);\n        this.connection.logger.logSchemaBuild(`${lastTimeExecutedMigration.name} is the last executed migration. It was executed on ${new Date(lastTimeExecutedMigration.timestamp * 1000).toString()}.`);\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (!queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner);\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(`Migration ${migrationToRevert.name} has been reverted successfully.`);\n\n            // commit transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n        } catch (err) { // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try { // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n\n            throw err;\n\n        } finally {\n\n            // if query runner was created by us then release it\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(queryRunner: QueryRunner): Promise<void> {\n        const tableExist = await queryRunner.hasTable(this.migrationsTableName);\n        if (!tableExist) {\n            await queryRunner.createTable(new Table(this.migrationsTableName, [\n                new TableColumn({\n                    name: \"timestamp\",\n                    type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),\n                    isPrimary: true,\n                    isNullable: false\n                }),\n                new TableColumn({\n                    name: \"name\",\n                    type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),\n                    isNullable: false\n                }),\n            ]));\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    protected async loadExecutedMigrations(queryRunner: QueryRunner): Promise<Migration[]> {\n        const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.migrationsTableName, \"migrations\")\n            .getRawMany();\n\n        return migrationsRaw.map(migrationRaw => {\n            return new Migration(parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n        });\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(`${migrationClassName} migration name is wrong. Migration class name should have a UNIX timestamp appended. `);\n\n            return new Migration(migrationTimestamp, migrationClassName, migration);\n        });\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestMigration(migrations: Migration[]): Migration|undefined {\n        const sortedMigrations = migrations.map(migration => migration).sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n        if (this.connection.driver instanceof SqlServerDriver) {\n            await queryRunner.insert(this.migrationsTableName, {\n                timestamp: new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any),\n                name: new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any),\n            });\n\n        } else {\n            await queryRunner.insert(this.migrationsTableName, {\n                timestamp: migration.timestamp,\n                name: migration.name,\n            });\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(queryRunner: QueryRunner, migration: Migration): Promise<void> {\n        if (this.connection.driver instanceof SqlServerDriver) {\n            await queryRunner.delete(this.migrationsTableName, {\n                timestamp: new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }) as any),\n                name: new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }) as any),\n            });\n\n        } else {\n            await queryRunner.delete(this.migrationsTableName, {\n                timestamp: migration.timestamp,\n                name: migration.name,\n            });\n        }\n    }\n\n}"],"sourceRoot":".."}