{"version":3,"sources":["../../src/error/DataTypeNotSupportedError.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA;IAA+C,6CAAK;IAGhD,mCAAY,MAAsB,EAAE,QAAoB,EAAE,QAAuB;QAAjF,YACI,iBAAO,SAGV;QAND,UAAI,GAAG,2BAA2B,CAAC;QAI/B,IAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,IAAI,CAAC;QAC5E,KAAI,CAAC,OAAO,GAAG,iBAAc,IAAI,gBAAS,MAAM,CAAC,cAAc,CAAC,UAAU,SAAI,MAAM,CAAC,YAAY,iCAA0B,QAAQ,iBAAa,CAAC;;IACrJ,CAAC;IAEL,gCAAC;AAAD,CATA,AASC,CAT8C,KAAK,GASnD;AATY,8DAAyB","file":"DataTypeNotSupportedError.js","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\nexport class DataTypeNotSupportedError extends Error {\n    name = \"DataTypeNotSupportedError\";\n\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n\n}"],"sourceRoot":".."}