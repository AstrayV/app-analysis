{"version":3,"sources":["../../src/error/UsingJoinColumnIsNotAllowedError.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA;GACG;AACH;IAAsD,oDAAK;IAGvD,0CAAY,cAA8B,EAAE,QAA0B;QAAtE,YACI,iBAAO,SAGV;QAND,UAAI,GAAG,kCAAkC,CAAC;QAItC,KAAI,CAAC,OAAO,GAAG,yBAAuB,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,gBAAa;YAC3F,sEAAsE,CAAC;;IAC/E,CAAC;IAEL,uCAAC;AAAD,CATA,AASC,CATqD,KAAK,GAS1D;AATY,4EAAgC","file":"UsingJoinColumnIsNotAllowedError.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnIsNotAllowedError extends Error {\n    name = \"UsingJoinColumnIsNotAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn on ${entityMetadata.name}#${relation.propertyName} is wrong. ` +\n            `You can use JoinColumn only on one-to-one and many-to-one relations.`;\n    }\n\n}"],"sourceRoot":".."}