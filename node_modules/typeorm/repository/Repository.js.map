{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        return this.manager.create<any>(this.metadata.target, plainEntityLikeOrPlainEntityLikes as any);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n        return this.manager.merge(this.metadata.target, mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    async preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.preload(this.metadata.target, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    async save<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    async save<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    async save<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.save(this.metadata.target, entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    async insert(entity: Partial<Entity>|Partial<Entity>[], options?: SaveOptions): Promise<void> {\n        return this.manager.insert(this.metadata.target, entity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     */\n    async update(conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        return this.manager.update(this.metadata.target, conditions, partialEntity, options);\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     */\n    async updateById(id: any, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        return this.manager.updateById(this.metadata.target, id, partialEntity, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    async remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    async remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    async remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\n        return this.manager.remove(this.metadata.target, entityOrEntities as any, options);\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete(conditions: Partial<Entity>, options?: RemoveOptions): Promise<void> {\n        return this.manager.delete(this.metadata.target, conditions, options);\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async deleteById(id: any, options?: RemoveOptions): Promise<void> {\n        return this.manager.deleteById(this.metadata.target, id, options);\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     *\n     * @deprecated use deleteById method instead.\n     */\n    async removeById(id: any, options?: RemoveOptions): Promise<void> {\n        return this.manager.deleteById(this.metadata.target, id, options);\n    }\n\n    /**\n     * Removes entity by a given entity id.\n     *\n     * @deprecated use deleteById method instead.\n     */\n    async removeByIds(ids: any[], options?: RemoveOptions): Promise<void> {\n        return this.manager.removeByIds(this.metadata.target, ids, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: DeepPartial<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: DeepPartial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: DeepPartial<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: DeepPartial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|DeepPartial<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options can be applied.\n     */\n    findOneById(id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally conditions can be applied.\n     */\n    findOneById(id: any, conditions?: DeepPartial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity by given id.\n     * Optionally find options or conditions can be applied.\n     */\n    findOneById(id: any, optionsOrConditions?: FindOneOptions<Entity>|DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOneById(this.metadata.target, id, optionsOrConditions as any);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n}"],"sourceRoot":".."}