{"version":3,"sources":["../../src/repository/TreeRepository.ts"],"names":[],"mappings":"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","file":"TreeRepository.js","sourcesContent":["import {Repository} from \"./Repository\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nexport class TreeRepository<Entity> extends Repository<Entity> {\n\n    // todo: implement moving\n    // todo: implement removing\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    async findTrees(): Promise<Entity[]> {\n        const roots = await this.findRoots();\n        await Promise.all(roots.map(async root => {\n            await this.findDescendantsTree(root);\n        }));\n\n        return roots;\n    }\n\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    findRoots(): Promise<Entity[]> {\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n        const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(\n          this.metadata.treeParentRelation!.propertyName, \"id\"\n        );\n\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    findDescendants(entity: Entity): Promise<Entity[]> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findDescendantsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of descendants of the entity.\n     */\n    countDescendants(entity: Entity): Promise<number> {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n\n        const joinCondition = `${escape(alias)}.${escape(this.metadata.primaryColumns[0].databaseName)}=${escape(closureTableAlias)}.${escape(\"descendant\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n            .where(`${escape(closureTableAlias)}.${escape(\"ancestor\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\n\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    findAncestors(entity: Entity): Promise<Entity[]> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    }\n\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    findAncestorsTree(entity: Entity): Promise<Entity> {\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(entitiesAndScalars => {\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n                return entity;\n            });\n    }\n\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    countAncestors(entity: Entity): Promise<number> {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    }\n\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\n\n        // create shortcuts for better readability\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\n\n        const joinCondition = `${escapeAlias(alias)}.${escapeColumn(this.metadata.primaryColumns[0].databaseName)}=${escapeAlias(closureTableAlias)}.${escapeColumn(\"ancestor\")}`;\n        return this.createQueryBuilder(alias)\n            .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n            .where(`${escapeAlias(closureTableAlias)}.${escapeColumn(\"descendant\")}=${this.metadata.getEntityIdMap(entity)![this.metadata.primaryColumns[0].propertyName]}`);\n    }\n\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\n        return rawResults.map(rawResult => {\n            return {\n                id: rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName],\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation!.joinColumns[0].givenDatabaseName]\n            };\n        });\n    }\n\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity.id) !== -1);\n        entity[childProperty].forEach((childEntity: any) => {\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    }\n\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n        const parentEntity = entities.find(entity => {\n            if (!parentRelationMap)\n                return false;\n\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    }\n\n}\n"],"sourceRoot":".."}