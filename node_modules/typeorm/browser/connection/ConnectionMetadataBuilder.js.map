{"version":3,"sources":["../browser/src/connection/ConnectionMetadataBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,4BAA4B,EAAE,0BAA0B,EAAC,MAAM,wCAAwC,CAAC;AAChH,OAAO,EAAC,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAC,gBAAgB,EAAC,MAAM,cAAc,CAAC;AAE9C,OAAO,EAAC,sBAAsB,EAAC,MAAM,UAAU,CAAC;AAChD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2CAA2C,CAAC;AAChF,OAAO,EAAC,uBAAuB,EAAC,MAAM,0CAA0C,CAAC;AAMjF;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,mCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,mDAAe,GAAf,UAAgB,UAA+B;QACrC,IAAA,gDAAsF,EAArF,wBAAgB,EAAE,4BAAoB,CAAgD;QAC7F,IAAM,mBAAmB,GAAO,gBAAgB,QAAK,4BAA4B,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACzG,OAAO,mBAAmB,CAAC,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,gBAAgB,CAAqB,cAAc,CAAC,EAApD,CAAoD,CAAC,CAAC;IAC3G,CAAC;IAED;;OAEG;IACH,oDAAgB,GAAhB,UAAiB,WAAgC;QACvC,IAAA,uDAA+F,EAA9F,yBAAiB,EAAE,6BAAqB,CAAuD;QACtG,IAAM,oBAAoB,GAAO,iBAAiB,QAAK,4BAA4B,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC5G,OAAO,sBAAsB,EAAE;aAC1B,iBAAiB,CAAC,oBAAoB,CAAC;aACvC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,gBAAgB,CAAiC,QAAQ,CAAC,MAAM,CAAC,EAAjE,CAAiE,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,wDAAoB,GAApB,UAAqB,QAA6B,EAAE,OAAgC;QAC1E,IAAA,oDAAoF,EAAnF,qBAAa,EAAE,yBAAiB,CAAoD;QAC3F,IAAM,gBAAgB,GAAO,aAAa,QAAK,4BAA4B,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAChG,IAAM,wBAAwB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,sBAAsB,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAExH,IAAA,mDAA+F,EAA9F,2BAAmB,EAAE,+BAAuB,CAAmD;QACtG,IAAM,sBAAsB,GAAO,mBAAmB,QAAK,0BAA0B,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAChH,IAAM,6BAA6B,GAAG,IAAI,uBAAuB,EAAE,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;QACtG,IAAM,qBAAqB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC,KAAK,EAAE,CAAC;QAEhH,OAAW,wBAAwB,QAAK,qBAAqB,EAAE;IACnE,CAAC;IAEL,gCAAC;AAAD,CAjDA,AAiDC,IAAA","file":"ConnectionMetadataBuilder.js","sourcesContent":["import {importClassesFromDirectories, importJsonsFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: Function[]|string[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: Function[]|string[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: Function[]|string[], schemas: EntitySchema[]|string[]): EntityMetadata[] {\n        const [entityClasses, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(entityDirectories)];\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const [entitySchemaClasses, entitySchemaDirectories] = OrmUtils.splitClassesAndStrings(schemas || []);\n        const allEntitySchemaClasses = [...entitySchemaClasses, ...importJsonsFromDirectories(entitySchemaDirectories)];\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(allEntitySchemaClasses);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}"],"sourceRoot":".."}