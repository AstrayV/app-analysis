{"version":3,"sources":["../browser/src/error/UsingJoinColumnOnlyOnOneSideAllowedError.ts"],"names":[],"mappings":";;;;;;;;;;AAGA;GACG;AACH;IAA8D,4DAAK;IAG/D,kDAAY,cAA8B,EAAE,QAA0B;QAAtE,YACI,iBAAO,SAIV;QAPD,UAAI,GAAG,0CAA0C,CAAC;QAI9C,KAAI,CAAC,OAAO,GAAG,+EAA+E;aAC1F,UAAQ,cAAc,CAAC,IAAI,SAAI,QAAQ,CAAC,YAAY,aAAQ,QAAQ,CAAC,qBAAqB,CAAC,IAAI,SAAI,QAAQ,CAAC,eAAgB,CAAC,YAAY,MAAG,CAAA;YAC5I,uFAAuF,CAAC;;IAChG,CAAC;IAEL,+CAAC;AAAD,CAVA,AAUC,CAV6D,KAAK,GAUlE","file":"UsingJoinColumnOnlyOnOneSideAllowedError.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinColumnOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        this.message = `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`;\n    }\n\n}"],"sourceRoot":".."}