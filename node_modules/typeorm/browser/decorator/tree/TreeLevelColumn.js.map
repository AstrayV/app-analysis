{"version":3,"sources":["../browser/src/decorator/tree/TreeLevelColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AAGnD;;GAEG;AACH,MAAM;IACF,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,EAAE;SACd,CAAC;QACF,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC","file":"TreeLevelColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn(): Function {\n    return function (object: Object, propertyName: string) {\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"treeLevel\",\n            options: {}\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}