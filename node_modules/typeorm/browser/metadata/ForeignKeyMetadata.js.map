{"version":3,"sources":["../browser/src/metadata/ForeignKeyMetadata.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH;IAwDI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,4BAAY,OAOX;QAnDD;;WAEG;QACH,YAAO,GAAqB,EAAE,CAAC;QAE/B;;WAEG;QACH,sBAAiB,GAAqB,EAAE,CAAC;QAsBzC;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAC;QAE3B;;WAEG;QACH,0BAAqB,GAAa,EAAE,CAAC;QAcjC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;QACjE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,OAAO,CAAC,cAAc;YACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC3C,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;OAGG;IACH,kCAAK,GAAL,UAAM,cAAuC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;QAC/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;QACnE,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACrJ,CAAC;IAEL,yBAAC;AAAD,CA7FA,AA6FC,IAAA","file":"ForeignKeyMetadata.js","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata;\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = [];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * Gets the table name to which this foreign key is applied.\n     */\n    tableName: string;\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTableName: string;\n\n    /**\n     * Gets foreign key name.\n     */\n    name: string;\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        referencedEntityMetadata: EntityMetadata,\n        namingStrategy?: NamingStrategyInterface,\n        columns: ColumnMetadata[],\n        referencedColumns: ColumnMetadata[],\n        onDelete?: OnDeleteType\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map(column => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n        this.tableName = this.entityMetadata.tableName;\n        this.referencedTableName = this.referencedEntityMetadata.tableName;\n        this.name = namingStrategy.foreignKeyName(this.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n    }\n\n}"],"sourceRoot":".."}