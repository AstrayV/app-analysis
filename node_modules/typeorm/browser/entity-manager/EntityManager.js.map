{"version":3,"sources":["../browser/src/entity-manager/EntityManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,OAAO,EAAC,uCAAuC,EAAC,MAAM,kDAAkD,CAAC;AAKzG,OAAO,EAAC,iCAAiC,EAAC,MAAM,4CAA4C,CAAC;AAE7F,OAAO,EAAC,cAAc,EAAC,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAC,gBAAgB,EAAC,MAAM,kCAAkC,CAAC;AAClE,OAAO,EAAC,cAAc,EAAC,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAC,wBAAwB,EAAC,MAAM,yCAAyC,CAAC;AACjF,OAAO,EAAC,iCAAiC,EAAC,MAAM,gEAAgE,CAAC;AACjH,OAAO,EAAC,sCAAsC,EAAC,MAAM,qEAAqE,CAAC;AAC3H,OAAO,EAAC,6BAA6B,EAAC,MAAM,wCAAwC,CAAC;AACrF,OAAO,EAAC,sBAAsB,EAAC,MAAM,UAAU,CAAC;AAChD,OAAO,EAAC,kBAAkB,EAAC,MAAM,kCAAkC,CAAC;AACpE,OAAO,EAAC,4CAA4C,EAAC,MAAM,uDAAuD,CAAC;AAGnH,OAAO,EAAC,WAAW,EAAC,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAC,uBAAuB,EAAC,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAC,sBAAsB,EAAC,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAC,iBAAiB,EAAC,MAAM,iCAAiC,CAAC;AAClE,OAAO,EAAC,+BAA+B,EAAC,MAAM,0CAA0C,CAAC;AAIzF;;;GAGG;AACH;IA0BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAY,UAAsB,EAAE,WAAyB;QAb7D,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAE5E;;WAEG;QACO,iBAAY,GAAsB,EAAE,CAAC;QAO3C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAC/B,uCAAuC;YACvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;SACtD;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACG,mCAAW,GAAjB,UAAqB,gBAA6D;;;;;;wBAE9E,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,WAAW;4BAC7C,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;wBAEjE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU;4BAC/C,MAAM,IAAI,uCAAuC,EAAE,CAAC;wBAExD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB;4BACxD,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;wBAEtE,eAAe,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;wBAClF,wBAAwB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;;;;wBAGlF,qBAAM,eAAe,CAAC,gBAAgB,EAAE,EAAA;;wBAAxC,SAAwC,CAAC;wBAC1B,qBAAM,gBAAgB,CAAC,wBAAwB,CAAC,EAAA;;wBAAzD,MAAM,GAAG,SAAgD;wBAC/D,qBAAM,eAAe,CAAC,iBAAiB,EAAE,EAAA;;wBAAzC,SAAyC,CAAC;wBAC1C,sBAAO,MAAM,EAAC;;;;;;wBAIV,qBAAM,eAAe,CAAC,mBAAmB,EAAE,EAAA;;wBAA3C,SAA2C,CAAC;;;;;4BAEhD,MAAM,KAAG,CAAC;;6BAGN,CAAC,IAAI,CAAC,WAAW,EAAjB,yBAAiB;wBACjB,qBAAM,eAAe,CAAC,OAAO,EAAE,EAAA;;wBAA/B,SAA+B,CAAC;;;;;;;KAE3C;IAED;;OAEG;IACG,6BAAK,GAAX,UAAY,KAAa,EAAE,UAAkB;;;gBACzC,sBAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,EAAC;;;KACrE;IAYD;;OAEG;IACH,0CAAkB,GAAlB,UAA2B,WAA4D,EAAE,KAAc,EAAE,WAAyB;QAC9H,IAAI,KAAK,EAAE;YACP,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAA8B,EAAE,KAAK,EAAE,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;SAErH;aAAM;YACH,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,WAAoC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;SACvG;IACL,CAAC;IAYD;;OAEG;IACH,6BAAK,GAAL,UAAM,cAAmC,EAAE,WAAiB;QACxD,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC;QACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC;QACrE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAYD;;OAEG;IACH,6BAAK,GAAL,UAAM,cAAmC,EAAE,WAAiB;QACxD,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC;QACpF,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC;QACrE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAmBD;;;OAGG;IACH,8BAAM,GAAN,UAAe,WAAsC,EAAE,oBAAgE;QAAvH,iBAUC;QATG,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAE1D,IAAI,CAAC,oBAAoB;YACrB,OAAO,QAAQ,CAAC,MAAM,EAAE,CAAC;QAE7B,IAAI,oBAAoB,YAAY,KAAK;YACrC,OAAO,oBAAoB,CAAC,GAAG,CAAC,UAAA,eAAe,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC,EAAzC,CAAyC,CAAC,CAAC;QAElG,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,oBAAoB,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,6BAAK,GAAL,UAAc,WAAsC,EAAE,eAAuB;QAAE,qBAAqC;aAArC,UAAqC,EAArC,qBAAqC,EAArC,IAAqC;YAArC,oCAAqC;;QAChH,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAM,8BAA8B,GAAG,IAAI,iCAAiC,EAAE,CAAC;QAC/E,WAAW,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,8BAA8B,CAAC,SAAS,CAAC,eAAe,EAAE,MAAM,EAAE,QAAQ,CAAC,EAA3E,CAA2E,CAAC,CAAC;QAC3G,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACG,+BAAO,GAAb,UAAsB,WAAsC,EAAE,UAA+B;;;;;;wBACnF,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;wBACpD,sCAAsC,GAAG,IAAI,sCAAsC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBACzF,qBAAM,sCAAsC,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAA;;wBAAhG,iBAAiB,GAAG,SAA4E;wBACtG,IAAI,iBAAiB;4BACjB,sBAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,iBAA2B,EAAE,UAAU,CAAC,EAAC;wBAE5E,sBAAO,SAAS,EAAC;;;;KACpB;IA0BD;;OAEG;IACH,4BAAI,GAAJ,UAA4C,cAAiD,EAAE,oBAA4B,EAAE,YAA0B;QAAvJ,iBA4FC;QA1FG,IAAM,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,YAAY,QAAQ,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAiC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpK,IAAM,MAAM,GAAU,MAAM,CAAC,CAAC,CAAC,oBAA6B,CAAC,CAAC,CAAC,cAAuB,CAAC;QACvF,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,oBAAmC,CAAC;QAE5E,2EAA2E;QAC3E,IAAI,MAAM,YAAY,KAAK,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;;;;;wBASpB,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;wBAC9E,wBAAwB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;wBAClF,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;4BACvB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;;;;wBAGxC,cAAwC,EAAE,CAAC;6BAC7C,CAAA,MAAM,YAAY,KAAK,CAAA,EAAvB,wBAAuB;wBACvB,qBAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAM,MAAM;;;;;4CAC/B,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;4CACpD,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;4CAErD,oBAAoB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;4CAC9E,qBAAM,oBAAoB,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;4CAApD,SAAoD,CAAC;4CAE/C,QAAQ,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,EAAE,oBAAoB,CAAC,eAAe,CAAC,CAAC;4CAC5I,WAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;iCAC5B,CAAC,CAAC,EAAA;;wBATH,SASG,CAAC;;;wBAGE,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;wBACnD,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;wBAEpD,oBAAoB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;wBAC9E,qBAAM,oBAAoB,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;wBAApD,SAAoD,CAAC;wBAE/C,QAAQ,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,EAAE,oBAAoB,CAAC,eAAe,CAAC,CAAC;wBAC5I,WAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;wBAGvB,0BAA0B,GAAG,WAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,uBAAuB,EAAE,EAAlC,CAAkC,CAAC,CAAC;6BAChG,0BAA0B,CAAC,MAAM,EAAjC,yBAAiC;wBAK7B,4BAA4B,GAAG,KAAK,CAAC;;;;6BAIjC,CAAC,WAAW,CAAC,mBAAmB,EAAhC,wBAAgC;wBAChC,4BAA4B,GAAG,IAAI,CAAC;wBACpC,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;wBAApC,SAAoC,CAAC;;4BAGzC,qBAAM,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,GAAG,CAAC,UAAA,QAAQ;4BACrD,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;wBAC9B,CAAC,CAAC,CAAC,EAAA;;wBAFH,SAEG,CAAC;6BAGA,CAAA,4BAA4B,KAAK,IAAI,CAAA,EAArC,yBAAqC;wBACrC,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;wBAArC,SAAqC,CAAC;;;;;6BAKtC,4BAA4B,EAA5B,yBAA4B;;;;wBAExB,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;wBAAvC,SAAuC,CAAC;;;;;6BAIhD,MAAM,OAAK,CAAC;;;6BAKhB,CAAC,IAAI,CAAC,WAAW,EAAjB,yBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;6BAGpC,sBAAO,MAAM,EAAC;;;aACjB,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACG,8BAAM,GAAZ,UAAqB,MAAiC,EAAE,MAA+D,EAAE,OAAqB;;;;;oBAC1I,wEAAwE;oBACxE,wEAAwE;oBAExE,qBAAM,IAAI,CAAC,kBAAkB,EAAE;6BAC1B,MAAM,EAAE;6BACR,IAAI,CAAC,MAAM,CAAC;6BACZ,MAAM,CAAC,MAAM,CAAC;6BACd,OAAO,EAAE,EAAA;;wBAPd,wEAAwE;wBACxE,wEAAwE;wBAExE,SAIc,CAAC;;;;;KAClB;IAED;;;;;;OAMG;IACG,8BAAM,GAAZ,UAAqB,MAAiC,EAAE,UAA2B,EAAE,aAAkC,EAAE,OAAqB;;;;;oBAC1I,wEAAwE;oBACxE,wEAAwE;oBAExE,qBAAM,IAAI,CAAC,kBAAkB,EAAE;6BAC1B,MAAM,CAAC,MAAM,CAAC;6BACd,GAAG,CAAC,aAAa,CAAC;6BAClB,KAAK,CAAC,UAAU,CAAC;6BACjB,OAAO,EAAE,EAAA;;wBAPd,wEAAwE;wBACxE,wEAAwE;wBAExE,SAIc,CAAC;;;;;KAClB;IAED;;;;;;OAMG;IACG,kCAAU,GAAhB,UAAyB,MAAiC,EAAE,EAAa,EAAE,aAAkC,EAAE,OAAqB;;;;;oBAChI,wEAAwE;oBACxE,wEAAwE;oBAExE,qBAAM,IAAI,CAAC,kBAAkB,EAAE;6BAC1B,MAAM,CAAC,MAAM,CAAC;6BACd,GAAG,CAAC,aAAa,CAAC;6BAClB,UAAU,CAAC,EAAE,CAAC;6BACd,OAAO,EAAE,EAAA;;wBAPd,wEAAwE;wBACxE,wEAAwE;wBAExE,SAIc,CAAC;;;;;KAClB;IAsBD;;OAEG;IACH,8BAAM,GAAN,UAAe,cAAiD,EAAE,oBAAsC,EAAE,YAA4B;QAAtI,iBAqFC;QAnFG,IAAM,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,cAAc,YAAY,QAAQ,IAAI,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAiC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpK,IAAM,MAAM,GAAoB,MAAM,CAAC,CAAC,CAAC,oBAAuC,CAAC,CAAC,CAAC,cAAiC,CAAC;QACrH,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,oBAAmC,CAAC;QAE5E,2EAA2E;QAC3E,IAAI,MAAM,YAAY,KAAK,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;;;;;wBAEpB,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;wBAC9E,wBAAwB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;wBAClF,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;4BACvB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;;;;wBAGxC,cAAwC,EAAE,CAAC;6BAC7C,CAAA,MAAM,YAAY,KAAK,CAAA,EAAvB,wBAAuB;wBACvB,qBAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,UAAM,MAAM;;;;;4CAC/B,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;4CACpD,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;4CAErD,oBAAoB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;4CAC9E,qBAAM,oBAAoB,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;4CAAnD,SAAmD,CAAC;4CAE9C,QAAQ,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,EAAE,oBAAoB,CAAC,eAAe,CAAC,CAAC;4CAC5I,WAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;;iCAC5B,CAAC,CAAC,EAAA;;wBATH,SASG,CAAC;;;wBAGE,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;wBACnD,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;wBAEpD,oBAAoB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;wBAC9E,qBAAM,oBAAoB,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;wBAAnD,SAAmD,CAAC;wBAE9C,QAAQ,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,wBAAwB,EAAE,WAAW,EAAE,oBAAoB,CAAC,eAAe,CAAC,CAAC;wBAC5I,WAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;;wBAGvB,0BAA0B,GAAG,WAAS,CAAC,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,uBAAuB,EAAE,EAAlC,CAAkC,CAAC,CAAC;6BAChG,0BAA0B,CAAC,MAAM,EAAjC,yBAAiC;wBAK7B,4BAA4B,GAAG,KAAK,CAAC;;;;6BAIjC,CAAC,WAAW,CAAC,mBAAmB,EAAhC,wBAAgC;wBAChC,4BAA4B,GAAG,IAAI,CAAC;wBACpC,qBAAM,WAAW,CAAC,gBAAgB,EAAE,EAAA;;wBAApC,SAAoC,CAAC;;4BAGzC,qBAAM,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,GAAG,CAAC,UAAA,QAAQ;4BACrD,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC;wBAC9B,CAAC,CAAC,CAAC,EAAA;;wBAFH,SAEG,CAAC;6BAGA,CAAA,4BAA4B,KAAK,IAAI,CAAA,EAArC,yBAAqC;wBACrC,qBAAM,WAAW,CAAC,iBAAiB,EAAE,EAAA;;wBAArC,SAAqC,CAAC;;;;;6BAKtC,4BAA4B,EAA5B,yBAA4B;;;;wBAExB,qBAAM,WAAW,CAAC,mBAAmB,EAAE,EAAA;;wBAAvC,SAAuC,CAAC;;;;;6BAIhD,MAAM,OAAK,CAAC;;;6BAKhB,CAAC,IAAI,CAAC,WAAW,EAAjB,yBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;6BAGpC,sBAAO,MAAM,EAAC;;;aACjB,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACG,8BAAM,GAAZ,UAAqB,cAAyC,EAAE,UAA2B,EAAE,OAAuB;;;;;oBAChH,wEAAwE;oBACxE,wEAAwE;oBAExE,qBAAM,IAAI,CAAC,kBAAkB,EAAE;6BAC1B,MAAM,EAAE;6BACR,IAAI,CAAC,cAAc,CAAC;6BACpB,KAAK,CAAC,UAAU,CAAC;6BACjB,OAAO,EAAE,EAAA;;wBAPd,wEAAwE;wBACxE,wEAAwE;wBAExE,SAIc,CAAC;;;;;KAClB;IAED;;;;;;OAMG;IACG,kCAAU,GAAhB,UAAyB,cAAyC,EAAE,EAAa,EAAE,OAAuB;;;;;oBACtG,wEAAwE;oBACxE,wEAAwE;oBAExE,qBAAM,IAAI,CAAC,kBAAkB,EAAE;6BAC1B,MAAM,EAAE;6BACR,IAAI,CAAC,cAAc,CAAC;6BACpB,UAAU,CAAC,EAAE,CAAC;6BACd,OAAO,EAAE,EAAA;;wBAPd,wEAAwE;wBACxE,wEAAwE;wBAExE,SAIc,CAAC;;;;;KAClB;IAED;;;;OAIG;IACG,kCAAU,GAAhB,UAAyB,cAAyC,EAAE,EAAO,EAAE,OAAuB;;;gBAChG,sBAAO,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,CAAC,EAAC;;;KACvD;IAED;;;;OAIG;IACG,mCAAW,GAAjB,UAA0B,cAAyC,EAAE,GAAU,EAAE,OAAuB;;;gBACpG,sBAAO,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,GAAG,EAAE,OAAO,CAAC,EAAC;;;KACxD;IAcD;;;OAGG;IACG,6BAAK,GAAX,UAAoB,WAAsC,EAAE,mBAA6D;;;;gBAC/G,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpI,sBAAO,gBAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,QAAQ,EAAE,EAAC;;;KAC9G;IAYD;;OAEG;IACG,4BAAI,GAAV,UAAmB,WAAsC,EAAE,mBAA6D;;;;gBAC9G,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAChD,sBAAO,gBAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,OAAO,EAAE,EAAC;;;KAC7G;IAgBD;;;;OAIG;IACG,oCAAY,GAAlB,UAA2B,WAAsC,EAAE,mBAA6D;;;;gBACtH,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAChD,sBAAO,gBAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,eAAe,EAAE,EAAC;;;KACrH;IAcD;;;OAGG;IACG,iCAAS,GAAf,UAAwB,WAAsC,EAAE,GAAU,EAAE,mBAA6D;;;;gBAErI,sFAAsF;gBACtF,IAAI,CAAC,GAAG,CAAC,MAAM;oBACX,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;gBAEzB,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACpI,gBAAgB,CAAC,8CAA8C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;gBAEzF,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,UAAA,EAAE;oBACZ,IAAI,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,EAAE;wBAC7D,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC3C;oBACD,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAChD,sBAAO,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAC;;;KAC1C;IAYD;;OAEG;IACG,+BAAO,GAAb,UAAsB,WAAsC,EAAE,mBAA4D;;;;gBAChH,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACnI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAChD,sBAAO,gBAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,MAAM,EAAE,EAAC;;;KAC3G;IAcD;;;OAGG;IACG,mCAAW,GAAjB,UAA0B,WAAsC,EAAE,EAAO,EAAE,mBAA4D;;;;gBAC7H,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACpD,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACnI,IAAI,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,EAAE;oBAC5D,0DAA0D;oBAC1D,MAAM,IAAI,KAAK,CAAC,8GAA8G;wBAC1H,uFAAuF,CAAC,CAAC;iBAChG;gBAED,IAAI,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,EAAE,YAAY,MAAM,CAAC,EAAE;oBAC7D,EAAE,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACzC;gBAED,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAChD,gBAAgB,CAAC,6CAA6C,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;gBACxF,sBAAO,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,EAAC;;;KAC1C;IAED;;;;;OAKG;IACG,6BAAK,GAAX,UAAoB,WAAsC;;;;;;wBAChD,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;wBACpD,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;;;;wBAEzE,qBAAM,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAA;4BAArD,sBAAO,SAA8C,EAAC,CAAC,oDAAoD;;6BAGvG,CAAC,IAAI,CAAC,WAAW,EAAjB,wBAAiB;wBACjB,qBAAM,WAAW,CAAC,OAAO,EAAE,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;;KAEvC;IAED;;;;;OAKG;IACH,qCAAa,GAAb,UAAsB,MAAiC;QAEnD,wEAAwE;QACxE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;YACpC,MAAM,IAAI,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEpE,kEAAkE;QAClE,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAhC,CAAgC,CAAC,CAAC;QAC1F,IAAI,UAAU;YACV,OAAO,UAAU,CAAC;QAEtB,+EAA+E;QAC/E,IAAM,aAAa,GAAG,IAAI,iBAAiB,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,yCAAiB,GAAjB,UAA0B,MAAiC;QAEvD,yDAAyD;QACzD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,KAAK,KAAK;YAC5C,MAAM,IAAI,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAEtE,8CAA8C;QAC9C,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,CAAC,CAAC,UAAU,YAAY,cAAc,CAAC;YACvC,MAAM,IAAI,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAE7C,OAAO,UAAU,CAAC;IACtB,CAAC;IAYD;;OAEG;IACH,0CAAkB,GAAlB,UAA2B,iBAA4C;QACnE,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAS,iBAAwB,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACH,2CAAmB,GAAnB,UAAuB,gBAA+B;QAClD,IAAM,4BAA4B,GAAG,sBAAsB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAA,UAAU;YAC5F,OAAO,UAAU,CAAC,MAAM,KAAK,CAAC,gBAAgB,YAAY,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAE,gBAAwB,CAAC,WAAW,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,4BAA4B;YAC7B,MAAM,IAAI,6BAA6B,CAAC,gBAAgB,CAAC,CAAC;QAE9D,IAAM,cAAc,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC1I,IAAM,wBAAwB,GAAG,IAAK,4BAA4B,CAAC,MAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAExG,4HAA4H;QAC5H,kEAAkE;QAClE,IAAI,wBAAwB,YAAY,kBAAkB,EAAE;YACxD,IAAI,CAAE,wBAAgC,CAAC,SAAS,CAAC;gBAC5C,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;SAC3D;QACD,IAAI,wBAAwB,YAAY,UAAU,EAAE;YAChD,IAAI,CAAC,cAAc;gBACf,MAAM,IAAI,4CAA4C,CAAC,gBAAgB,CAAC,CAAC;YAE5E,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YACnD,wBAAgC,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;SAClE;QAED,OAAO,wBAAwB,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACG,+BAAO,GAAb;;;gBACI,IAAI,CAAC,IAAI,CAAC,WAAW;oBACjB,MAAM,IAAI,iCAAiC,EAAE,CAAC;gBAElD,sBAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAC;;;KACrC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,0CAAkB,GAA5B,UAA6B,EAA2B,EAAE,KAAa,EAAE,QAAwB;QAAjG,iBAMC;QALG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,QAAQ;YACpC,IAAM,aAAa,GAAG,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC5E,EAAE,CAAC,iBAAiB,CAAC,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACzE,KAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,aAAa,EAAE,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,oBAAC;AAAD,CAz0BA,AAy0BC,IAAA","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\nimport {SaveOptions} from \"../repository/SaveOptions\";\nimport {NoNeedToReleaseEntityManagerError} from \"../error/NoNeedToReleaseEntityManagerError\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {Repository} from \"../repository/Repository\";\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../error/CustomRepositoryCannotInheritRepositoryError\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {RepositoryNotFoundError} from \"../error/RepositoryNotFoundError\";\nimport {RepositoryNotTreeError} from \"../error/RepositoryNotTreeError\";\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\nimport {TreeRepositoryNotSupportedError} from \"../error/TreeRepositoryNotSupportedError\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {QueryPartialEntity} from \"../query-builder/QueryPartialEntity\";\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by en repositories.\n     */\n    protected repositories: Repository<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            Object.assign(this.queryRunner, { manager: this });\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManger: EntityManager) => Promise<T>): Promise<T> {\n\n        if (this.connection.driver instanceof MongoDriver)\n            throw new Error(`Transactions aren't supported by MongoDB.`);\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        if (this.queryRunner && this.queryRunner.isTransactionActive)\n            throw new Error(`Cannot start transaction because its already started`);\n\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n        const transactionEntityManager = this.connection.createEntityManager(usedQueryRunner);\n\n        try {\n            await usedQueryRunner.startTransaction();\n            const result = await runInTransaction(transactionEntityManager);\n            await usedQueryRunner.commitTransaction();\n            return result;\n\n        } catch (err) {\n            try { // we throw original error even if rollback thrown an error\n                await usedQueryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw err;\n\n        } finally {\n            if (!this.queryRunner) // if we used a new query runner provider then release it\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner);\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass as Function|string, alias, queryRunner || this.queryRunner);\n\n        } else {\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || this.queryRunner);\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean;\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function|string, entity: any): boolean;\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: Function|string, entity: any): any;\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        const metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        const metadata = this.connection.getMetadata(entityClass);\n\n        if (!plainObjectOrObjects)\n            return metadata.create();\n\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\n\n        return this.merge(entityClass, metadata.create(), plainObjectOrObjects);\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity>(entityClass: ObjectType<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n        return mergeIntoEntity;\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity>(entityClass: ObjectType<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity)\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\n\n        return undefined;\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|string, entity: T, options?: SaveOptions): Promise<T>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|string, entities: T[], options?: SaveOptions): Promise<T[]>;\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|ObjectType<Entity>|string, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n\n            // todo: use transaction instead if possible\n            // await this.transaction(async transactionEntityManager => {\n            //     if (options && options.data)\n            //         transactionEntityManager.data = options.data;\n            //\n            // });\n\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n            const transactionEntityManager = this.connection.createEntityManager(queryRunner);\n            if (options && options.data)\n                Object.assign(queryRunner.data, options.data);\n\n            try {\n                const executors: SubjectOperationExecutor[] = [];\n                if (entity instanceof Array) {\n                    await Promise.all(entity.map(async entity => {\n                        const entityTarget = target ? target : entity.constructor;\n                        const metadata = this.connection.getMetadata(entityTarget);\n\n                        const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n                        await databaseEntityLoader.persist(entity, metadata);\n\n                        const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\n                        executors.push(executor);\n                    }));\n\n                } else {\n                    const finalTarget = target ? target : entity.constructor;\n                    const metadata = this.connection.getMetadata(finalTarget);\n\n                    const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n                    await databaseEntityLoader.persist(entity, metadata);\n\n                    const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\n                    executors.push(executor);\n                }\n\n                const executorsNeedsToBeExecuted = executors.filter(executor => executor.areExecutableOperations());\n                if (executorsNeedsToBeExecuted.length) {\n\n                    // start execute queries in a transaction\n                    // if transaction is already opened in this query runner then we don't touch it\n                    // if its not opened yet then we open it here, and once we finish - we close it\n                    let isTransactionStartedByItself = false;\n                    try {\n\n                        // open transaction if its not opened yet\n                        if (!queryRunner.isTransactionActive) {\n                            isTransactionStartedByItself = true;\n                            await queryRunner.startTransaction();\n                        }\n\n                        await Promise.all(executorsNeedsToBeExecuted.map(executor => {\n                            return executor.execute();\n                        }));\n\n                        // commit transaction if it was started by us\n                        if (isTransactionStartedByItself === true)\n                            await queryRunner.commitTransaction();\n\n                    } catch (error) {\n\n                        // rollback transaction if it was started by us\n                        if (isTransactionStartedByItself) {\n                            try {\n                                await queryRunner.rollbackTransaction();\n                            } catch (rollbackError) { }\n                        }\n\n                        throw error;\n                    }\n                }\n\n            } finally {\n                if (!this.queryRunner) // release it only if its created by this method\n                    await queryRunner.release();\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(target: ObjectType<Entity>|string, entity: QueryPartialEntity<Entity>|QueryPartialEntity<Entity>[], options?: SaveOptions): Promise<void> {\n        // todo: in the future create InsertResult with query result information\n        // todo: think if subscribers and listeners can be executed here as well\n\n        await this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute();\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(target: ObjectType<Entity>|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        // todo: in the future create UpdateResult with query result information\n        // todo: think if subscribers and listeners can be executed here as well\n\n        await this.createQueryBuilder()\n            .update(target)\n            .set(partialEntity)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Updates entity partially. Entity will be found by a given id.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async updateById<Entity>(target: ObjectType<Entity>|string, id: any|any[], partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\n        // todo: in the future create UpdateResult with query result information\n        // todo: think if subscribers and listeners can be executed here as well\n\n        await this.createQueryBuilder()\n            .update(target)\n            .set(partialEntity)\n            .whereInIds(id)\n            .execute();\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\n\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\n\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n            const transactionEntityManager = this.connection.createEntityManager(queryRunner);\n            if (options && options.data)\n                Object.assign(queryRunner.data, options.data);\n\n            try {\n                const executors: SubjectOperationExecutor[] = [];\n                if (entity instanceof Array) {\n                    await Promise.all(entity.map(async entity => {\n                        const entityTarget = target ? target : entity.constructor;\n                        const metadata = this.connection.getMetadata(entityTarget);\n\n                        const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n                        await databaseEntityLoader.remove(entity, metadata);\n\n                        const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\n                        executors.push(executor);\n                    }));\n\n                } else {\n                    const finalTarget = target ? target : entity.constructor;\n                    const metadata = this.connection.getMetadata(finalTarget);\n\n                    const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\n                    await databaseEntityLoader.remove(entity, metadata);\n\n                    const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\n                    executors.push(executor);\n                }\n\n                const executorsNeedsToBeExecuted = executors.filter(executor => executor.areExecutableOperations());\n                if (executorsNeedsToBeExecuted.length) {\n\n                    // start execute queries in a transaction\n                    // if transaction is already opened in this query runner then we don't touch it\n                    // if its not opened yet then we open it here, and once we finish - we close it\n                    let isTransactionStartedByItself = false;\n                    try {\n\n                        // open transaction if its not opened yet\n                        if (!queryRunner.isTransactionActive) {\n                            isTransactionStartedByItself = true;\n                            await queryRunner.startTransaction();\n                        }\n\n                        await Promise.all(executorsNeedsToBeExecuted.map(executor => {\n                            return executor.execute();\n                        }));\n\n                        // commit transaction if it was started by us\n                        if (isTransactionStartedByItself === true)\n                            await queryRunner.commitTransaction();\n\n                    } catch (error) {\n\n                        // rollback transaction if it was started by us\n                        if (isTransactionStartedByItself) {\n                            try {\n                                await queryRunner.rollbackTransaction();\n                            } catch (rollbackError) { }\n                        }\n\n                        throw error;\n                    }\n                }\n\n            } finally {\n                if (!this.queryRunner) // release it only if its created by this method\n                    await queryRunner.release();\n            }\n\n            return entity;\n        });\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(targetOrEntity: ObjectType<Entity>|string, conditions: Partial<Entity>, options?: RemoveOptions): Promise<void> {\n        // todo: in the future create DeleteResult with query result information\n        // todo: think if subscribers and listeners can be executed here as well\n\n        await this.createQueryBuilder()\n            .delete()\n            .from(targetOrEntity)\n            .where(conditions)\n            .execute();\n    }\n\n    /**\n     * Deletes entities by a given entity id or ids.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Does not modify source entity and does not execute listeners and subscribers.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async deleteById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any|any[], options?: RemoveOptions): Promise<void> {\n        // todo: in the future create DeleteResult with query result information\n        // todo: think if subscribers and listeners can be executed here as well\n\n        await this.createQueryBuilder()\n            .delete()\n            .from(targetOrEntity)\n            .whereInIds(id)\n            .execute();\n    }\n\n    /**\n     * Deletes entity by a given entity id.\n     *\n     * @deprecated use deleteById method instead.\n     */\n    async removeById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any, options?: RemoveOptions): Promise<void> {\n        return this.deleteById(targetOrEntity, id, options);\n    }\n\n    /**\n     * Deletes entity by a given entity ids.\n     *\n     * @deprecated use deleteById method instead.\n     */\n    async removeByIds<Entity>(targetOrEntity: ObjectType<Entity>|string, ids: any[], options?: RemoveOptions): Promise<void> {\n        return this.deleteById(targetOrEntity, ids, options);\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    count<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    async count<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        this.joinEagerRelations(qb, qb.alias, metadata);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        this.joinEagerRelations(qb, qb.alias, metadata);\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    async findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length)\n            return Promise.resolve([]);\n\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n\n        ids = ids.map(id => {\n            if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n                return metadata.createEntityIdMap([id]);\n            }\n            return id;\n        });\n        this.joinEagerRelations(qb, qb.alias, metadata);\n        return qb.andWhereInIds(ids).getMany();\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    async findOne<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        this.joinEagerRelations(qb, qb.alias, metadata);\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\n    }\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally conditions can be applied.\n     */\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds entity with given id.\n     * Optionally find options or conditions can be applied.\n     */\n    async findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\n        if (metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            // const columnNames = this.metadata.getEntityIdMap({  });\n            throw new Error(`You have multiple primary keys in your entity, to use findOneById with multiple primary keys please provide ` +\n                `complete object with all entity ids, like this: { firstKey: value, secondKey: value }`);\n        }\n\n        if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\n            id = metadata.createEntityIdMap([id]);\n        }\n\n        this.joinEagerRelations(qb, qb.alias, metadata);\n        FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n        return qb.andWhereInIds([id]).getOne();\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: ObjectType<Entity>|string): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass);\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n        try {\n            return await queryRunner.truncate(metadata.tablePath); // await is needed here because we are using finally\n\n        } finally {\n            if (!this.queryRunner)\n                await queryRunner.release();\n        }\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity>(target: ObjectType<Entity>|string): Repository<Entity> {\n\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.connection.name, target);\n\n        // find already created repository instance and return it if found\n        const metadata = this.connection.getMetadata(target);\n        const repository = this.repositories.find(repository => repository.metadata === metadata);\n        if (repository)\n            return repository;\n\n        // if repository was not found then create it, store its instance and return it\n        const newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity>(target: ObjectType<Entity>|string): TreeRepository<Entity> {\n\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\n\n        // check if repository is real tree repository\n        const repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n\n        return repository;\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity name.\n     */\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\n\n    /**\n     * Gets mongodb repository for the given entity class or name.\n     */\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n\n            (entityRepositoryInstance as any)[\"manager\"] = this;\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\n        }\n\n        return entityRepositoryInstance;\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner)\n            throw new NoNeedToReleaseEntityManagerError();\n\n        return this.queryRunner.release();\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Joins all eager relations recursively.\n     */\n    protected joinEagerRelations(qb: SelectQueryBuilder<any>, alias: string, metadata: EntityMetadata) {\n        metadata.eagerRelations.forEach(relation => {\n            const relationAlias = alias + \"_\" + relation.propertyPath.replace(\".\", \"_\");\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    }\n\n}"],"sourceRoot":".."}