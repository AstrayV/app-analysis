{"version":3,"sources":["../browser/src/query-builder/RelationLoader.ts"],"names":[],"mappings":"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","file":"RelationLoader.js","sourcesContent":["import {RelationMetadata} from \"../metadata/RelationMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nexport class RelationLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    load(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entity);\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entity);\n\n        } else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entity);\n\n        } else { // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entity);\n        }\n    }\n\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    loadManyToOneOrOneToOneOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const primaryColumns = relation.entityMetadata.primaryColumns;\n        const joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation!.joinColumns;\n        const conditions = joinColumns.map(joinColumn => {\n            return `${relation.entityMetadata.name}.${relation.propertyName} = ${relation.propertyName}.${joinColumn.referencedColumn!.propertyName}`;\n        }).join(\" AND \");\n\n        const qb = this.connection\n            .createQueryBuilder()\n            .select(relation.propertyName) // category\n            .from(relation.type, relation.propertyName) // Category, category\n            .innerJoin(relation.entityMetadata.target as Function, relation.entityMetadata.name, conditions);\n\n        primaryColumns.forEach(primaryColumn => {\n            qb.andWhere(`${relation.entityMetadata.name}.${primaryColumn.propertyPath} = :${primaryColumn.propertyName}`)\n                .setParameter(`${primaryColumn.propertyName}`, primaryColumn.getEntityValue(entity));\n        });\n\n        return qb.getOne();\n    }\n\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    loadOneToManyOrOneToOneNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const qb = this.connection\n            .createQueryBuilder()\n            .select(relation.propertyName)\n            .from(relation.inverseRelation!.entityMetadata.target, relation.propertyName);\n\n        relation.inverseRelation!.joinColumns.forEach(joinColumn => {\n            qb.andWhere(`${relation.propertyName}.${joinColumn.propertyName} = :${joinColumn.referencedColumn!.propertyName}`)\n                .setParameter(`${joinColumn.referencedColumn!.propertyName}`, joinColumn.referencedColumn!.getEntityValue(entity));\n        });\n        return relation.isOneToMany ? qb.getMany() : qb.getOne();\n    }\n\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    loadManyToManyOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = :${joinColumn.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName}=${mainAlias}.${inverseJoinColumn.referencedColumn!.propertyName}`;\n        });\n        const parameters = relation.joinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder()\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    loadManyToManyNotOwner(relation: RelationMetadata, entity: ObjectLiteral): Promise<any> {\n        const mainAlias = relation.propertyName;\n        const joinAlias = relation.junctionEntityMetadata!.tableName;\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(joinColumn => {\n            return `${joinAlias}.${joinColumn.propertyName} = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`;\n        });\n        const inverseJoinColumnConditions = relation.inverseRelation!.inverseJoinColumns.map(inverseJoinColumn => {\n            return `${joinAlias}.${inverseJoinColumn.propertyName} = :${inverseJoinColumn.propertyName}`;\n        });\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce((parameters, joinColumn) => {\n            parameters[joinColumn.propertyName] = joinColumn.referencedColumn!.getEntityValue(entity);\n            return parameters;\n        }, {} as ObjectLiteral);\n\n        return this.connection\n            .createQueryBuilder()\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, [...joinColumnConditions, ...inverseJoinColumnConditions].join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    }\n\n}"],"sourceRoot":".."}