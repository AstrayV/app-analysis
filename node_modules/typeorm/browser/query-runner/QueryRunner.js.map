{"version":3,"sources":["../browser/src/query-runner/QueryRunner.ts"],"names":[],"mappings":"","file":"QueryRunner.js","sourcesContent":["import {TableColumn} from \"../schema-builder/schema/TableColumn\";\nimport {Table} from \"../schema-builder/schema/Table\";\nimport {TableForeignKey} from \"../schema-builder/schema/TableForeignKey\";\nimport {TableIndex} from \"../schema-builder/schema/TableIndex\";\nimport {Connection} from \"../connection/Connection\";\nimport {ReadStream} from \"../platform/PlatformTools\";\nimport {InsertResult} from \"../driver/InsertResult\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Runs queries on a single database connection.\n *\n * todo: extract schema build operations out of query runner.\n *\n * todo: add following methods:\n * - renameTable\n */\nexport interface QueryRunner {\n\n    /**\n     * Connection used by this query runner.\n     */\n    readonly connection: Connection;\n\n    /**\n     * Isolated entity manager working only with current query runner.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    readonly isReleased: boolean;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    readonly isTransactionActive: boolean;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data: ObjectLiteral;\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Releases used database connection.\n     * You cannot use this query runner methods after connection is released.\n     */\n    release(): Promise<void>;\n\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    clearDatabase(tables?: string[], database?: string): Promise<void>;\n\n    /**\n     * Starts transaction.\n     */\n    startTransaction(): Promise<void>;\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    commitTransaction(): Promise<void>;\n\n    /**\n     * Ends transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    rollbackTransaction(): Promise<void>;\n\n    /**\n     * Executes a given SQL query and returns raw database results.\n     */\n    query(query: string, parameters?: any[]): Promise<any>;\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream>; // todo: ReadStream gonna bring problems in websql driver\n\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     */\n    insert(tablePath: string, valuesMap: Object): Promise<InsertResult>;\n\n    /**\n     * Updates rows that match given simple conditions in the given table.\n     */\n    update(tablePath: string, valuesMap: Object, conditions: Object): Promise<void>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tablePath: string, condition: string, parameters?: any[]): Promise<void>;\n\n    /**\n     * Performs a simple DELETE query by a given conditions in a given table.\n     */\n    delete(tablePath: string, conditions: Object): Promise<void>;\n\n    /**\n     * Inserts new values into closure table.\n     */\n    insertIntoClosureTable(tablePath: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number>;\n\n    /**\n     * Loads a table by a given given name from the database and creates a Table from them.\n     */\n    getTable(tablePath: string): Promise<Table|undefined>;\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     *\n     * todo: make tableNames optional\n     */\n    getTables(tablePaths: string[]): Promise<Table[]>;\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    hasDatabase(database: string): Promise<boolean>;\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    hasTable(tablePath: string): Promise<boolean>;\n\n    /**\n     * Creates a database if it's not created.\n     */\n    createDatabase(database: string): Promise<void[]>;\n\n    /**\n     * Creates a schema if it's not created.\n     */\n    createSchema(schemas: string[]): Promise<void[]>;\n\n    /**\n     * Creates a new table from the given table metadata and column metadatas.\n     */\n    createTable(table: Table): Promise<void>;\n\n    // todo: create createTableIfNotExist method\n\n    /**\n     * Drops the table.\n     */\n    dropTable(tablePath: string): Promise<void>;\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    hasColumn(tableName: string, columnName: string): Promise<boolean>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(tableName: string, column: TableColumn): Promise<void>;\n\n    /**\n     * Adds a new column in the table.\n     */\n    addColumn(table: Table, column: TableColumn): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(table: string, columns: TableColumn[]): Promise<void>;\n\n    /**\n     * Adds new columns in the table.\n     */\n    addColumns(table: Table, columns: TableColumn[]): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(table: Table, oldColumn: TableColumn, newColumn: TableColumn): Promise<void>;\n\n    /**\n     * Renames column in the given table.\n     */\n    renameColumn(tableName: string, oldColumnName: string, newColumnName: string): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: Table, oldColumn: TableColumn, newColumn: TableColumn): Promise<void>;\n\n    /**\n     * Changes a column in the table.\n     */\n    changeColumn(table: string, oldColumn: string, newColumn: TableColumn): Promise<void>;\n\n    /**\n     * Changes a columns in the table.\n     */\n    changeColumns(table: Table, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void>;\n\n    /**\n     * Drops the column in the table.\n     */\n    dropColumn(table: Table, column: TableColumn): Promise<void>;\n\n    /**\n     * Drops the columns in the table.\n     */\n    dropColumns(table: Table, columns: TableColumn[]): Promise<void>;\n\n    /**\n     * Updates primary keys in the table.\n     */\n    updatePrimaryKeys(table: Table): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(tableName: string, foreignKey: TableForeignKey): Promise<void>;\n\n    /**\n     * Creates a new foreign key.\n     */\n    createForeignKey(table: Table, foreignKey: TableForeignKey): Promise<void>;\n\n    /**\n     * Creates a new foreign keys.\n     */\n    createForeignKeys(table: Table, foreignKeys: TableForeignKey[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: string, foreignKey: TableForeignKey): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKey(table: Table, foreignKey: TableForeignKey): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: string, foreignKeys: TableForeignKey[]): Promise<void>;\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    dropForeignKeys(table: Table, foreignKeys: TableForeignKey[]): Promise<void>;\n\n    /**\n     * Creates a new index.\n     */\n    createIndex(tableName: Table|string, index: TableIndex): Promise<void>;\n\n    /**\n     * Drops an index from the table.\n     */\n    dropIndex(tableSchemeOrPath: Table|string, index: TableIndex|string): Promise<void>;\n\n    /**\n     * Truncates table.\n     *\n     * todo: probably this should be renamed to drop or clear?\n     */\n    truncate(tableName: string): Promise<void>;\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void;\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void;\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): (string|{ up: string, down: string })[];\n\n}"],"sourceRoot":".."}