{"version":3,"sources":["../browser/src/schema-builder/schema/Table.ts"],"names":[],"mappings":"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","file":"Table.js","sourcesContent":["import {TableColumn} from \"./TableColumn\";\nimport {TableIndex} from \"./TableIndex\";\nimport {TableForeignKey} from \"./TableForeignKey\";\nimport {TablePrimaryKey} from \"./TablePrimaryKey\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {Driver} from \"../../driver/Driver\";\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {AbstractSqliteDriver} from \"../../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {MysqlDriver} from \"../../driver/mysql/MysqlDriver\";\nimport {OracleDriver} from \"../../driver/oracle/OracleDriver\";\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name.\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = [];\n\n    /**\n     * Table primary keys.\n     */\n    primaryKeys: TablePrimaryKey[] = [];\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    /**\n     * Database name.\n     */\n    database?: string;\n\n    /**\n     * Schema name. Used in Postgres and Sql Server.\n     */\n    schema?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string, columns?: TableColumn[]|ObjectLiteral[], justCreated?: boolean, engine?: string, database?: string, schema?: string) {\n        this.name = name;\n        if (columns) {\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\n                if (column instanceof TableColumn) {\n                    return column;\n                } else {\n                    return new TableColumn(column);\n                }\n            });\n        }\n\n        if (justCreated !== undefined)\n            this.justCreated = justCreated;\n\n        this.engine = engine;\n        this.database = database;\n        this.schema = schema;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets only those primary keys that does not\n     */\n    get primaryKeysWithoutGenerated(): TablePrimaryKey[] {\n        const generatedColumn = this.columns.find(column => column.isGenerated);\n        if (!generatedColumn)\n            return this.primaryKeys;\n\n        return this.primaryKeys.filter(primaryKey => {\n            return primaryKey.columnName !== generatedColumn.name;\n        });\n    }\n\n    get hasGeneratedColumn(): boolean {\n        return !!this.columns.find(column => column.isGenerated);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        const cloned = new Table(this.name);\n        cloned.columns = this.columns.map(column => column.clone());\n        cloned.indices = this.indices.map(index => index.clone());\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\n        cloned.engine = this.engine;\n        cloned.database = this.database;\n        cloned.schema = this.schema;\n        return cloned;\n    }\n\n    /**\n     * Adds columns.\n     */\n    addColumns(columns: TableColumn[]) {\n        this.columns = this.columns.concat(columns);\n    }\n\n    /**\n     * Replaces given column.\n     */\n    replaceColumn(oldColumn: TableColumn, newColumn: TableColumn) {\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\n    }\n\n    /**\n     * Removes a columns from this table.\n     */\n    removeColumn(columnToRemove: TableColumn) {\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Remove all columns from this table.\n     */\n    removeColumns(columns: TableColumn[]) {\n        columns.forEach(column => this.removeColumn(column));\n    }\n\n    /**\n     * Adds all given primary keys.\n     */\n    addPrimaryKeys(addedKeys: TablePrimaryKey[]) {\n        addedKeys.forEach(key => {\n            this.primaryKeys.push(key);\n            const index = this.columns.findIndex(column => column.name === key.columnName);\n            if (index !== -1) {\n                this.columns[index].isPrimary = true;\n            }\n        });\n    }\n\n    /**\n     * Removes all given primary keys.\n     */\n    removePrimaryKeys(droppedKeys: TablePrimaryKey[]) {\n        droppedKeys.forEach(key => {\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\n            const index = this.columns.findIndex(column => column.name === key.columnName);\n            if (index !== -1) {\n                this.columns[index].isPrimary = false;\n            }\n        });\n    }\n\n    /**\n     * Removes primary keys of the given columns.\n     */\n    removePrimaryKeysOfColumns(columns: TableColumn[]) {\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\n            return !columns.find(column => column.name === primaryKey.columnName);\n        });\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKeys(foreignKeys: TableForeignKey[]) {\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\n    }\n\n    /**\n     * Removes foreign key from this table.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey) {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Removes all foreign keys from this table.\n     */\n    removeForeignKeys(dbForeignKeys: TableForeignKey[]) {\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\n    }\n\n    /**\n     * Removes indices from this table.\n     */\n    removeIndex(tableIndex: TableIndex) {\n        const index = this.indices.find(index => index.name === tableIndex.name);\n        if (index)\n            this.indices.splice(this.indices.indexOf(index), 1);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(driver: Driver, columnMetadatas: ColumnMetadata[]): TableColumn[] {\n        return this.columns.filter(tableColumn => {\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            if (!columnMetadata)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(tableColumn.name, \"!==\", columnMetadata.databaseName); //  ||\n            // console.log(tableColumn.type, \"!==\", driver.normalizeType(columnMetadata)); // ||\n            // console.log(tableColumn.comment, \"!==\", columnMetadata.comment); //  ||\n            // console.log(this.compareDefaultValues(driver.normalizeDefault(columnMetadata), tableColumn.default)); // || // we included check for generated here, because generated columns already can have default values\n            // console.log(tableColumn.isNullable, \"!==\", columnMetadata.isNullable); //  ||\n            // console.log(tableColumn.isUnique, \"!==\", columnMetadata.isUnique); //  ||\n            // console.log(tableColumn.isGenerated, \"!==\", columnMetadata.isGenerated);\n\n            const skipGenerationCheck = columnMetadata.generationStrategy === \"uuid\" && (driver instanceof AbstractSqliteDriver || driver instanceof MysqlDriver || driver instanceof OracleDriver);\n            return  tableColumn.name !== columnMetadata.databaseName ||\n                    tableColumn.type !== driver.normalizeType(columnMetadata) ||\n                    tableColumn.comment !== columnMetadata.comment ||\n                    (!tableColumn.isGenerated && !this.compareDefaultValues(driver.normalizeDefault(columnMetadata), tableColumn.default)) || // we included check for generated here, because generated columns already can have default values\n                    tableColumn.isNullable !== columnMetadata.isNullable ||\n                    tableColumn.isUnique !== driver.normalizeIsUnique(columnMetadata) ||\n                    // tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                    (skipGenerationCheck === false && tableColumn.isGenerated !== columnMetadata.isGenerated) ||\n                    !this.compareColumnLengths(driver, tableColumn, columnMetadata);\n        });\n    }\n\n    findColumnByName(name: string): TableColumn|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Compare column lengths only if the datatype supports it.\n     */\n\n    private compareColumnLengths(driver: Driver, tableColumn: TableColumn, columnMetadata: ColumnMetadata): boolean {\n\n        const normalizedColumn = driver.normalizeType(columnMetadata) as ColumnType;\n        if (driver.withLengthColumnTypes.indexOf(normalizedColumn) !== -1) {\n            let metadataLength = driver.getColumnLength(columnMetadata);\n\n            // if we found something to compare with then do it, else skip it\n            // use use case insensitive comparison to catch \"MAX\" vs \"Max\" case\n            if (metadataLength)\n                return tableColumn.length.toLowerCase() === metadataLength.toLowerCase();\n        }\n\n        return true;\n\n    }    \n\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\n\n        // if (typeof columnMetadataValue === \"number\")\n        //     return columnMetadataValue === parseInt(databaseValue);\n        // if (typeof columnMetadataValue === \"boolean\")\n        //     return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\n        // if (typeof columnMetadataValue === \"function\")\n        // if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\")\n        //     return columnMetadataValue.toLowerCase() === databaseValue.toLowerCase();\n\n\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n\n            // we need to cut out \"((x))\" where x number generated by mssql\n            columnMetadataValue = columnMetadataValue.replace(/\\(\\([0-9.]*\\)\\)$/g, \"$1\");\n            databaseValue = databaseValue.replace(/\\(\\(([0-9.]*?)\\)\\)$/g, \"$1\");\n\n            // we need to cut out \"(\" because in mssql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^\\(|\\)$/g, \"\");\n            databaseValue = databaseValue.replace(/^\\(|\\)$/g, \"\");\n\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n\n        // console.log(\"columnMetadataValue\", columnMetadataValue);\n        // console.log(\"databaseValue\", databaseValue);\n        return columnMetadataValue === databaseValue;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     *\n     * todo: need deeper implementation\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver) {\n        const table = new Table(entityMetadata.tableName);\n        table.engine = entityMetadata.engine;\n        table.database = entityMetadata.database;\n        table.schema = entityMetadata.schema;\n        entityMetadata.columns.forEach(column => {\n            const tableColumn = TableColumn.create(column, \n                driver.normalizeType(column), \n                driver.normalizeDefault(column),\n                driver.getColumnLength(column)); \n            table.columns.push(tableColumn);\n        });\n\n        return table;\n    }\n\n}"],"sourceRoot":"../.."}