{"version":3,"sources":["../browser/src/schema-builder/schema/TableIndex.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH;IA0BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,oBAAY,SAAiB,EAAE,IAAY,EAAE,WAAqB,EAAE,QAAiB;QACjF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,0BAAK,GAAL;QACI,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxG,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,iBAAM,GAAb,UAAc,aAA4B;QACtC,OAAO,IAAI,UAAU,CACjB,aAAa,CAAC,cAAc,CAAC,SAAS,EACtC,aAAa,CAAC,IAAI,EAClB,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC,EACxD,aAAa,CAAC,QAAQ,CACzB,CAAC;IACN,CAAC;IAEL,iBAAC;AAAD,CAhEA,AAgEC,IAAA","file":"TableIndex.js","sourcesContent":["import {IndexMetadata} from \"../../metadata/IndexMetadata\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Table name that contains this unique index.\n     */\n    tableName: string;\n\n    /**\n     * Index name.\n     */\n    name: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(tableName: string, name: string, columnNames: string[], isUnique: boolean) {\n        this.tableName = tableName;\n        this.name = name;\n        this.columnNames = columnNames;\n        this.isUnique = isUnique;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone() {\n        return new TableIndex(this.tableName, this.name, this.columnNames.map(name => name), this.isUnique);\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): TableIndex {\n        return new TableIndex(\n            indexMetadata.entityMetadata.tableName,\n            indexMetadata.name,\n            indexMetadata.columns.map(column => column.databaseName),\n            indexMetadata.isUnique\n        );\n    }\n\n}"],"sourceRoot":"../.."}