{"version":3,"sources":["../../src/schema-builder/schema/TableForeignKey.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IAqCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,yBAAY,IAAY,EACZ,WAAqB,EACrB,qBAA+B,EAC/B,eAAuB,EACvB,mBAA2B,EAC3B,QAAiB;QAEzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;QAC3C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,+BAAK,GAAL;QACI,OAAO,IAAI,eAAe,CACtB,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,mBAAmB,CAC3B,CAAC;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,sBAAM,GAAb,UAAc,QAA4B;QACtC,OAAO,IAAI,eAAe,CACtB,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,qBAAqB,EAC9B,QAAQ,CAAC,mBAAmB,EAC5B,QAAQ,CAAC,wBAAwB,CAAC,SAAS,EAC3C,QAAQ,CAAC,QAAQ,CACpB,CAAC;IACN,CAAC;IAEL,sBAAC;AAAD,CA3FA,AA2FC,IAAA;AA3FY,0CAAe","file":"TableForeignKey.js","sourcesContent":["import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the table which contains this foreign key.\n     */\n    name: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Table path referenced in the foreign key.\n     */\n    referencedTablePath: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(name: string,\n                columnNames: string[],\n                referencedColumnNames: string[],\n                referencedTable: string,\n                referencedTablePath: string,\n                onDelete?: string) {\n\n        this.name = name;\n        this.columnNames = columnNames;\n        this.referencedColumnNames = referencedColumnNames;\n        this.referencedTableName = referencedTable;\n        this.referencedTablePath = referencedTablePath;\n        this.onDelete = onDelete;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone() {\n        return new TableForeignKey(\n            this.name,\n            this.columnNames,\n            this.referencedColumnNames,\n            this.referencedTableName,\n            this.referencedTablePath\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new foreign schema from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata) {\n        return new TableForeignKey(\n            metadata.name,\n            metadata.columnNames,\n            metadata.referencedColumnNames,\n            metadata.referencedTableName,\n            metadata.referencedEntityMetadata.tablePath,\n            metadata.onDelete\n        );\n    }\n\n}"],"sourceRoot":"../.."}