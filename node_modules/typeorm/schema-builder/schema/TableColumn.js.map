{"version":3,"sources":["../../src/schema-builder/schema/TableColumn.ts"],"names":[],"mappings":"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","file":"TableColumn.js","sourcesContent":["import {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\n\n/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string;\n\n    /**\n     * Column type.\n     */\n    type: string;\n\n    /**\n     * Column's default value.\n     */\n    default: any;\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false;\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false;\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     */\n    generationStrategy?: \"uuid\"|\"increment\";\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false;\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Column's comment.\n     */\n    comment?: string;\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length: string = \"\";\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string;\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string;\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number;\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number;\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: any[];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: {\n        name?: string,\n        type?: string,\n        length?: string,\n        charset?: string,\n        collation?: string,\n        precision?: number,\n        scale?: number,\n        default?: any,\n        isNullable?: boolean,\n        isGenerated?: boolean,\n        generationStrategy?: \"uuid\"|\"increment\",\n        isPrimary?: boolean,\n        isUnique?: boolean,\n        comment?: string,\n        enum?: any[]\n    }) {\n        if (options) {\n            this.name = options.name || \"\";\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.default = options.default;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone(): TableColumn {\n        const newTableColumn = new TableColumn();\n        newTableColumn.name = this.name;\n        newTableColumn.type = this.type;\n        newTableColumn.length = this.length;\n        newTableColumn.charset = this.charset;\n        newTableColumn.collation = this.collation;\n        newTableColumn.precision = this.precision;\n        newTableColumn.scale = this.scale;\n        newTableColumn.enum = this.enum;\n        newTableColumn.default = this.default;\n        newTableColumn.isNullable = this.isNullable;\n        newTableColumn.isGenerated = this.isGenerated;\n        newTableColumn.generationStrategy = this.generationStrategy;\n        newTableColumn.isPrimary = this.isPrimary;\n        newTableColumn.isUnique = this.isUnique;\n        newTableColumn.isArray = this.isArray;\n        newTableColumn.comment = this.comment;\n        return newTableColumn;\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new column based on the given column metadata.\n     */\n    static create(columnMetadata: ColumnMetadata, normalizedType: string, normalizedDefault: string, normalizedLength: string): TableColumn {\n        const tableColumn = new TableColumn();\n        tableColumn.name = columnMetadata.databaseName;\n        tableColumn.length = normalizedLength;\n        tableColumn.charset = columnMetadata.charset;\n        tableColumn.collation = columnMetadata.collation;\n        tableColumn.precision = columnMetadata.precision;\n        tableColumn.scale = columnMetadata.scale;\n        tableColumn.default = normalizedDefault;\n        tableColumn.comment = columnMetadata.comment;\n        tableColumn.isGenerated = columnMetadata.isGenerated;\n        tableColumn.generationStrategy = columnMetadata.generationStrategy;\n        tableColumn.isNullable = columnMetadata.isNullable;\n        tableColumn.type = normalizedType;\n        tableColumn.isPrimary = columnMetadata.isPrimary;\n        tableColumn.isUnique = columnMetadata.isUnique;\n        tableColumn.isArray = columnMetadata.isArray || false;\n        tableColumn.enum = columnMetadata.enum;\n        return tableColumn;\n    }\n\n}"],"sourceRoot":"../.."}