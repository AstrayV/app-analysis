{"version":3,"sources":["../../src/metadata/EntityMetadataUtils.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH;IAAA;IAuCA,CAAC;IArCG;;OAEG;IACI,sCAAkB,GAAzB,UAA0B,QAAwB,EAAE,MAAqB,EAAE,MAAmB;QAA9F,iBAgBC;QAhB0E,uBAAA,EAAA,WAAmB;QAC1F,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAE3B,oHAAoH;YACpH,6DAA6D;YAC7D,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACrD,IAAI,QAAQ,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE;gBAClD,IAAM,QAAQ,GAAG,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;gBACrE,KAAK,CAAC,IAAI,OAAV,KAAK,EAAS,QAAQ,EAAE;aAC3B;iBAAM;gBACH,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;QACL,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,wCAAoB,GAA3B,UAA4B,MAAqB,EAAE,YAAoB;QACnE,IAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAM,SAAS,GAAG,UAAC,MAAqB;YACpC,IAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YACxC,IAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC3D,IAAI,UAAU,CAAC,MAAM;gBACjB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;YAE5B,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC;QACF,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAEL,0BAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,kDAAmB","file":"EntityMetadataUtils.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"./EntityMetadata\";\n\n/**\n * Utils used to work with EntityMetadata objects.\n */\nexport class EntityMetadataUtils {\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static createPropertyPath(metadata: EntityMetadata, entity: ObjectLiteral, prefix: string = \"\") {\n        const paths: string[] = [];\n        Object.keys(entity).forEach(key => {\n\n            // check for function is needed in the cases when createPropertyPath used on values containing a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], key);\n                paths.push(...subPaths);\n            } else {\n                const path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    }\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static getPropertyPathValue(entity: ObjectLiteral, propertyPath: string) {\n        const properties = propertyPath.split(\".\");\n        const recursive = (object: ObjectLiteral): any => {\n            const propertyName = properties.shift();\n            const value = propertyName ? object[propertyName] : object;\n            if (properties.length)\n                return recursive(value);\n\n            return value;\n        };\n        return recursive(entity);\n    }\n\n}"],"sourceRoot":".."}