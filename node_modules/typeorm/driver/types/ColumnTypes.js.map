{"version":3,"sources":["../../src/driver/types/ColumnTypes.ts"],"names":[],"mappings":";;AA8JA,iFAAiF;AACjF,qFAAqF;AAErF,4EAA4E;AAC5E,eAAe;AACf,4EAA4E;AAC5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6GAuF6G;AAC7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkLG","file":"ColumnTypes.js","sourcesContent":["/**\n * Column types where precision and scale properties are used.\n */\nexport type PrimaryGeneratedColumnType = \"int\" // mysql, mssql, oracle, sqlite\n    |\"int2\" // postgres, sqlite\n    |\"int2\" // postgres, sqlite\n    |\"int4\" // postgres\n    |\"int8\" // postgres, sqlite\n    |\"integer\" // postgres, oracle, sqlite\n    |\"tinyint\" // mysql, mssql, sqlite\n    |\"smallint\" // mysql, postgres, mssql, oracle, sqlite\n    |\"mediumint\" // mysql, sqlite\n    |\"bigint\" // mysql, postgres, mssql, sqlite\n    |\"dec\" // oracle, mssql\n    |\"decimal\" // mysql, postgres, mssql, sqlite\n    |\"numeric\" // postgres, mssql, sqlite\n    |\"number\"; // oracle\n\n/**\n * Column types where precision and scale properties are used.\n */\nexport type WithPrecisionColumnType = \"float\" // mysql, mssql, oracle, sqlite\n    |\"double\" // mysql, sqlite\n    |\"dec\" // oracle, mssql\n    |\"decimal\" // mysql, postgres, mssql, sqlite\n    |\"numeric\" // postgres, mssql, sqlite\n    |\"real\" // mysql, postgres, mssql, oracle, sqlite\n    |\"double precision\" // postgres, oracle, sqlite\n    |\"number\" // oracle\n    |\"datetime\" // mssql, mysql, sqlite\n    |\"datetime2\" // mssql\n    |\"datetimeoffset\" // mssql\n    |\"time\" // mysql, postgres, mssql\n    |\"time with time zone\" // postgres\n    |\"time without time zone\" // postgres\n    |\"timestamp\" // mysql, postgres, mssql, oracle\n    |\"timestamp without time zone\" // postgres\n    |\"timestamp with time zone\"; // postgres, oracle\n\n/**\n * Column types where column length is used.\n */\nexport type WithLengthColumnType = \"int\" // mysql, postgres, mssql, oracle, sqlite\n    |\"tinyint\" // mysql, mssql, sqlite\n    |\"smallint\" // mysql, postgres, mssql, oracle, sqlite\n    |\"mediumint\" // mysql, sqlite\n    |\"bigint\" // mysql, postgres, mssql, sqlite\n    |\"character varying\" // postgres\n    |\"varying character\" // sqlite\n    |\"nvarchar\" // mssql\n    |\"character\" // mysql, postgres, sqlite\n    |\"native character\" // sqlite\n    |\"varchar\" // mysql, postgres, mssql, sqlite\n    |\"char\" // mysql, postgres, mssql, oracle\n    |\"nchar\" // mssql, oracle, sqlite\n    |\"varchar2\" // oracle\n    |\"nvarchar2\" // oracle, sqlite\n    |\"binary\" // mssql\n    |\"varbinary\"; // mssql\n\n/**\n * All other regular column types.\n */\nexport type SimpleColumnType =\n\n    \"simple-array\" // typeorm-specific, automatically mapped to string\n    // |\"string\" // typeorm-specific, automatically mapped to varchar depend on platform\n\n    |\"simple-json\" // typeorm-specific, automatically mapped to string\n\n    // numeric types\n    |\"bit\" // mssql\n    |\"int2\" // postgres, sqlite\n    |\"integer\" // postgres, oracle, sqlite\n    |\"int4\" // postgres\n    |\"int8\" // postgres, sqlite\n    |\"unsigned big int\" // sqlite\n    |\"float4\" // postgres\n    |\"float8\" // postgres\n    |\"smallmoney\" // mssql\n    |\"money\" // postgres, mssql\n\n    // boolean types\n    |\"boolean\" // postgres, sqlite\n    |\"bool\" // postgres\n\n    // text/binary types\n    |\"tinyblob\" // mysql\n    |\"tinytext\" // mysql\n    |\"mediumblob\" // mysql\n    |\"mediumtext\" // mysql\n    |\"blob\" // mysql, oracle, sqlite\n    |\"text\" // mysql, postgres, mssql, sqlite\n    |\"ntext\" // mssql\n    |\"citext\" // postgres\n    |\"longblob\" // mysql\n    |\"longtext\" // mysql\n    |\"bytea\" // postgres\n    |\"long\" // oracle\n    |\"raw\" // oracle\n    |\"long raw\" // oracle\n    |\"bfile\" // oracle\n    |\"clob\" // oracle, sqlite\n    |\"nclob\" // oracle\n    |\"image\" // mssql\n\n    // date types\n    |\"timestamp with local time zone\" // oracle\n    |\"smalldatetime\" // mssql\n    |\"date\" // mysql, postgres, mssql, oracle, sqlite\n    |\"interval year\" // oracle\n    |\"interval day\" // oracle\n    |\"interval\" // postgres\n    |\"year\" // mysql\n\n    // geometric types\n    |\"point\" // postgres\n    |\"line\" // postgres\n    |\"lseg\" // postgres\n    |\"box\" // postgres\n    |\"circle\" // postgres\n    |\"path\" // postgres\n    |\"polygon\" // postgres\n\n    // other types\n    |\"enum\" // mysql, postgres\n    |\"cidr\" // postgres\n    |\"inet\" // postgres\n    |\"macaddr\"// postgres\n    |\"bit\" // postgres\n    |\"bit varying\" // postgres\n    |\"varbit\"// postgres\n    |\"tsvector\" // postgres\n    |\"tsquery\" // postgres\n    |\"uuid\" // postgres\n    |\"xml\" // mssql, postgres\n    |\"json\" // mysql, postgres\n    |\"jsonb\" // postgres\n    |\"varbinary\" // mssql\n    |\"cursor\" // mssql\n    |\"hierarchyid\" // mssql\n    |\"sql_variant\" // mssql\n    |\"table\" // mssql\n    |\"rowid\" // oracle\n    |\"urowid\" // oracle\n    |\"uniqueidentifier\"; // mssql\n\n/**\n * Any column type column can be.\n */\nexport type ColumnType = WithPrecisionColumnType\n    |WithLengthColumnType\n    |SimpleColumnType\n    |BooleanConstructor\n    |DateConstructor\n    |NumberConstructor\n    |StringConstructor;\n\n// \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n// \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\n\n// -------------------------------------------------------------------------\n// Merged Types\n// -------------------------------------------------------------------------\n/*\n/!**\n * Column types where column length is used.\n *!/\nexport type WithLengthColumnType =\n    VarcharColumnType|\n    CharColumnType|\n    IntervalColumnType|\n    BitColumnType|\n    VarbitColumnType;\n\n/!**\n * Column types where time options are used.\n *!/\nexport type WithTimeColumnType =\n    TimeColumnType|\n    TimestampColumnType;\n\n/!**\n * All other column types without extra options used.\n *!/\nexport type SimpleColumnType =\n    SmallintColumnType|\n    IntegerColumnType|\n    BigintColumnType|\n    DecimalColumnType|\n    RealColumnType|\n    DoublePrecisionColumnType|\n    SmallserialColumnType|\n    SerialColumnType|\n    BigserialColumnType|\n    MoneyColumnType|\n    TextColumnType|\n    ByteaColumnType|\n    DateColumnType|\n    BooleanColumnType|\n    PointColumnType|\n    LineColumnType|\n    LsegColumnType|\n    BoxColumnType|\n    CircleColumnType|\n    PathColumnType|\n    PolygonColumnType|\n    CidrColumnType|\n    InetColumnType|\n    MacaddrColumnType|\n    TsvectorColumnType|\n    TsqueryColumnType|\n    UUIDColumnType|\n    XmlColumnType|\n    JsonColumnType|\n    JsonbColumnType;\n\n/!**\n * All column types supported by a database.\n *!/\nexport type AllColumnType =\n    SimpleColumnType|\n    WithLengthColumnType|\n    WithTimeColumnType|\n    NumericColumnType|\n    EnumColumnType;\n\n\n/!**\n * All data types that column can be.\n *!/\nexport type ColumnType =\n    \"tinyint\"|\n    \"smallint\"|\n    \"int2\"|\n    \"mediumint\"|\n    \"integer\"|\n    \"int\"|\n    \"int4\"|\n    \"bigint\"|\n    \"int8\"|\n    \"decimal\"|\n    \"numeric\"|\n    \"real\"|\n    \"float4\"|\n    \"float\"|\n    \"double\"|\n    \"double precision\"|\n    \"numeric\"|\n    \"decimal\"|\n    \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";*/\n/*\n\n/!**\n * All data types that column can be.\n *!/\nexport class ColumnTypes {\n\n    /!**\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\n     *!/\n    static STRING: ColumnType = \"string\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be a \"string\".\n     *!/\n    static TEXT: ColumnType = \"text\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static NUMBER: ColumnType = \"number\";\n\n    /!**\n     * SQL INT type. Your class's property type should be a \"number\".\n     *!/\n    static INTEGER: ColumnType = \"integer\";\n\n    /!**\n     * SQL INT type. Your class's property type should be a \"number\".\n     *!/\n    static INT: ColumnType = \"int\";\n\n    /!**\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\n     *!/\n    static SMALLINT: ColumnType = \"smallint\";\n\n    /!**\n     * SQL BIGINT type. Your class's property type should be a \"number\".\n     *!/\n    static BIGINT: ColumnType = \"bigint\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static FLOAT: ColumnType = \"float\";\n\n    /!**\n     * SQL FLOAT type. Your class's property type should be a \"number\".\n     *!/\n    static DOUBLE: ColumnType = \"double\";\n\n    /!**\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\n     *!/\n    static DECIMAL: ColumnType = \"decimal\";\n\n    /!**\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\n     *!/\n    static DATE: ColumnType = \"date\";\n\n    /!**\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\n     *!/\n    static TIME: ColumnType = \"time\";\n\n    /!**\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\n     *!/\n    static DATETIME: ColumnType = \"datetime\";\n\n    /!**\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\n     *!/\n    static BOOLEAN: ColumnType = \"boolean\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be any Object.\n     *!/\n    static JSON: ColumnType = \"json\";\n\n    /!**\n     * Postgres jsonb type. Your class's property type should be any Object.\n     *!/\n    static JSONB: ColumnType = \"jsonb\";\n\n    /!**\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\n     *!/\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\n\n    /!**\n     * UUID type. Serialized to a string in typescript or javascript\n     *!/\n    static UUID: ColumnType = \"uuid\";\n\n    /!**\n     * Checks if given type in a string format is supported by ORM.\n     *!/\n    static isTypeSupported(type: string) {\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\n    }\n\n    /!**\n     * Returns list of all supported types by the ORM.\n     *!/\n    static get supportedTypes() {\n        return [\n            this.STRING,\n            this.TEXT,\n            this.NUMBER,\n            this.INTEGER,\n            this.INT,\n            this.SMALLINT,\n            this.BIGINT,\n            this.FLOAT,\n            this.DOUBLE,\n            this.DECIMAL,\n            this.DATE,\n            this.TIME,\n            this.DATETIME,\n            this.BOOLEAN,\n            this.JSON,\n            this.JSONB,\n            this.SIMPLE_ARRAY,\n            this.UUID\n        ];\n    }\n\n    /!**\n     * Tries to guess a column type from the given function.\n     *!/\n    static determineTypeFromFunction(type: Function): ColumnType|undefined {\n        if (type instanceof Date) {\n            return ColumnTypes.DATETIME;\n\n        } else if (type instanceof Function) {\n            const typeName = (<any>type).name.toLowerCase();\n            switch (typeName) {\n                case \"number\":\n                    return ColumnTypes.NUMBER;\n                case \"boolean\":\n                    return ColumnTypes.BOOLEAN;\n                case \"string\":\n                    return ColumnTypes.STRING;\n                case \"date\":\n                    return ColumnTypes.DATETIME;\n                case \"object\":\n                    return ColumnTypes.JSON;\n            }\n\n        } else if (type instanceof Object) {\n            return ColumnTypes.JSON;\n\n        }\n\n        return undefined;\n    }\n\n    static typeToString(type: Function): string {\n        return (type as any).name.toLowerCase();\n    }\n\n    /!**\n     * Checks if column type is numeric.\n     *!/\n    static isNumeric(type: ColumnType) {\n        return  type === ColumnTypes.NUMBER ||\n                type === ColumnTypes.INT ||\n                type === ColumnTypes.INTEGER ||\n                type === ColumnTypes.BIGINT ||\n                type === ColumnTypes.SMALLINT ||\n                type === ColumnTypes.DOUBLE ||\n                type === ColumnTypes.FLOAT;\n    }\n\n}*/\n"],"sourceRoot":"../.."}