{"version":3,"sources":["../../src/driver/websql/WebsqlDriver.ts"],"names":[],"mappings":"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","file":"WebsqlDriver.js","sourcesContent":["import {DriverUtils} from \"../DriverUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {WebSqlConnectionOptions} from \"./WebSqlConnectionOptions\";\nimport {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\n\n/**\n * Organizes communication with WebSQL in the browser.\n */\nexport class WebsqlDriver extends AbstractSqliteDriver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: WebSqlConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n        \n        this.options = connection.options as WebSqlConnectionOptions;\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        // todo: what about extra options: version, description, size\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    disconnect(): Promise<void> {\n        return Promise.resolve();\n        // if (!this.databaseConnection)\n        //     throw new ConnectionIsNotSetError(\"websql\");\n\n        // return new Promise<void>((ok, fail) => {\n            // const handler = (err: any) => err ? fail(err) : ok();\n            // todo: find out how to close connection\n            // ok();\n        // });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): WebsqlQueryRunner {\n        return new WebsqlQueryRunner(this);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n        }\n\n        return super.preparePersistentValue(value, columnMetadata);\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.type === \"json\") {\n            return JSON.parse(value);\n        }\n\n        return super.prepareHydratedValue(value, columnMetadata);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Function) {\n                return value();\n\n            }\n            // Websql doesn't support queries boolean values. Therefore 1 and 0 has to be used.\n            else if ((typeof value) === \"boolean\") {\n                escapedParameters.push((value ? 1 : 0));\n                return \"?\";\n            } else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return columnName; // \"`\" + columnName + \"`\";\n    }\n}"],"sourceRoot":"../.."}